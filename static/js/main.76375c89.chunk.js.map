{"version":3,"sources":["JSONInput.js","utils.js","FormElements/Filter.js","QuestionnaireBuilder/ConditionForm.js","QuestionnaireBuilder/ConditionGroupsForm.js","QuestionnaireBuilder/ConditionGroupForm.js","QuestionnaireBuilder/ConditionBlockForm.js","QuestionnaireBuilder/ConditionBlock.js","QuestionnaireBuilder/ResultsBuilderItem.js","QuestionnaireBuilder/ResultsBuilder.js","QuestionnaireBuilder/QuestionnaireBuilderAnswer.js","QuestionnaireBuilder/QuestionnaireBuilderAnswerList.js","QuestionnaireBuilder/QuestionnaireBuilderContentBlock.js","QuestionnaireBuilder/QuestionnaireBuilderContentBlockList.js","QuestionnaireBuilder/QuestionnaireBuilderQuestion.js","QuestionnaireBuilder/QuestionnaireBuilder.js","Questionnaire/QuestionnaireContentBlock.js","FormElements/Radio.js","FormElements/RadioGroup.js","FormElements/Checkbox.js","FormElements/CheckboxGroup.js","Questionnaire/QuestionnaireQuestion.js","Questionnaire/QuestionnaireQuestionList.js","Questionnaire/QuestionnaireResultItem.js","Questionnaire/QuestionnaireResults.js","Questionnaire/QuestionnaireSubmitButton.js","App.js","reportWebVitals.js","index.js"],"names":["JSONInput","props","useState","value","setValue","className","htmlFor","id","onChange","e","target","onClick","obj","JSON","parse","resetState","conditionMet","condition","selections","show","selection","question","type","answer","undefined","Array","isArray","includes","checkConditionGroup","group","comparison_type","conditions","every","forEach","console","log","some","displayConditionsMet","condition_block","length","conditionsPassed","groups","condition_groups","results","push","result","checkConditions","getDisplayable","arr","filter","item","generateId","uuidv4","customStyles","control","base","borderColor","borderRadius","dropdownIndicator","backgroundColor","color","indicatorSeparator","margin","placeholder","Filter","opts","label","aria-label","classNamePrefix","inputId","isClearable","val","options","styles","find","o","ConditionForm","questions","questionToExclude","handleDelete","handleUpdate","questionOptions","q","i","showAnswers","answers","map","a","text","getAnswerOptions","ConditionGroupsForm","conditionBlock","handler","conditionGroups","updateConditionGroup","data","block","Object","assign","index","findIndex","deleteConditionGroup","splice","conditionGroup","onUpdate","onDelete","ConditionGroupForm","prop","updateCondition","copy","deleteCondition","ConditionBlockForm","ConditionBlock","ResultItem","name","ResultsBuilder","setResults","deleteResult","updateResult","QuestionnaireBuilderAnswer","AnswerList","updateQuestion","updateAnswer","deleteAnswer","QuestionnaireBuilderContentBlock","ContentBlockList","contentBlocks","content_blocks","updateContentBlock","deleteContentBlock","QuestionnaireBuilderQuestion","required","checked","QuestionnaireBuilder","updateQuestions","deleteQuestion","QuestionnaireContentBlock","contentBlock","dangerouslySetInnerHTML","__html","Radio","containerClass","disabled","RadioGroup","questionID","Checkbox","CheckboxGroup","selected","handleChange","isChecked","QuestionnaireQuestion","content","FormComponent","QuestionnaireQuestionList","QuestionnaireResultItem","QuestionnaireResults","isFinished","isSubmitted","displayableResults","QuestionnaireSubmitButton","submitForm","title","App","setQuestions","setSelections","activeQuestions","setActiveQuestions","setFinished","setSubmitted","setup","questionsArray","selectionsObj","displayable","ids","leftovers","keys","x","finished","checkFinished","selectionsCopy","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76375c89.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst JSONInput = ( props ) => {\n  const [value, setValue] = useState(\"\");\n\n  const handleChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleJSON = () => {\n    let obj = JSON.parse(value);\n    props.resetState(obj);\n    setValue('');\n  };\n  \n  return (\n    <div className=\"block block__sub\">\n      <h3>JSON input</h3>\n      <div className=\"m-form-field\">\n          <label className=\"a-label a-label__heading\" htmlFor=\"json-input\">\n              Add JSON\n          </label>\n          <textarea id=\"json-input\" className=\"a-text-input a-text-input__full\" value={value} onChange={handleChange}>\n            Paste JSON here\n          </textarea>\n      </div>\n      <button className=\"a-btn\" onClick={ handleJSON }>Upload JSON</button>\n    </div> \n  )\n};\n\nexport default JSONInput;","import { v4 as uuidv4 } from 'uuid';\n\nexport const conditionMet = ( condition, selections, show ) => {\n  let selection = selections[condition.question];\n  let type = condition.type;\n  let answer = condition.answer;\n  if ( type === 'exists' ) {\n    return selection !== undefined;\n  } else if ( condition.type === 'equals' ) {\n    return Array.isArray( selection ) ? \n           selection.includes( answer ) : \n           selection === answer;\n  } else if ( condition.type === 'not_equals' ) {\n    return Array.isArray( selection ) ? \n           !selection.includes( answer ) : \n           selection !== answer;\n  }\n}\n\nexport const checkConditionGroup = ( group, selections, show ) => {\n  let comparison_type = group.type;\n  let conditions = group.conditions;\n  if ( comparison_type === 'all' ) {\n    return conditions.every(\n      condition => conditionMet( condition, selections ) === true\n    );\n  } else if ( comparison_type === 'any' ) {\n    conditions.forEach(\n      condition => console.log(conditionMet( condition, selections, show ))\n    )\n    return conditions.some(\n      condition => conditionMet( condition, selections ) === true\n    );\n  }\n}\n\nexport const checkConditions = ( condition_block, selections ) => {\n  const conditionsPassed = checkConditionGroup( \n  \tcondition_block, selections \n  );\n  let groups = condition_block.condition_groups;\n  if ( groups && groups.length > 0 ) {\n    let results = [];\n    groups.forEach( group => {\n      results.push(checkConditionGroup( group, selections ))\n    })\n  \treturn condition_block.type === 'any' ?\n  \t results.some( result => result === true ) :\n     results.every( result => result === true );\t   \n  } else {\n  \treturn conditionsPassed;\n  }\n}\n\nexport const checkFinished = ( questions, selections ) => {\n  return questions.every( q => q.id in selections );\n}\n\nexport const displayConditionsMet = ( obj, selections ) => {\n  let condition_block = obj.condition_block || {};\n  if ( !condition_block || \n       !condition_block.conditions || \n       !condition_block.conditions.length ) {\n    return true;\n  }\n  return checkConditions( condition_block, selections );\n}\n\nexport const getDisplayable = ( arr, selections ) => {\n  return arr.filter(\n    ( item ) => {\n      return displayConditionsMet( item, selections )\n    }\n  );\n}\n\nexport const getItemById = ( arr, id ) => {\n  return arr.find( (item)  => item.id === id);\n}\n\nexport const generateId = () => {\n  return uuidv4();\n}\n","import Select from 'react-select';\n\nconst customStyles = {\n  control: base => ( {\n    ...base,\n    borderColor: '#919395',\n    borderRadius: 0\n  } ),\n  dropdownIndicator: base => ( {\n    ...base,\n    backgroundColor: '#e7e8e9',\n    color: '#101820 !important'\n  } ),\n  indicatorSeparator: base => ( {\n    ...base,\n    backgroundColor: '#919395',\n    margin: 0\n  } ),\n  placeholder: base => ( {\n    ...base,\n    color: '#585d61'\n  } )\n};\n\nconst Filter = ( props ) => {\n  const changeHandler = ( val ) => {\n    props.onChange( val ? val.value : val );\n  }\n\n  const valueFromId = (opts, id) => {\n    return opts.find(o => o.value === id) || 0;\n  }\n\n  return (\n    <div className=\"m-form-field\">\n      <label className=\"a-label a-label__heading\"\n             htmlFor={ props.id }>\n        { props.label }\n      </label>\n      <Select aria-label={ props.label }\n              className={ props.className }\n              classNamePrefix=\"react-select\"\n              inputId={ props.id }\n              isClearable={ false }\n              onChange={ changeHandler }\n              options={ props.options }\n              placeholder={ props.placeholder }\n              styles={customStyles}\n              value={ valueFromId( props.options, props.value ) }/>\n      </div>\n    );\n};\n\nexport default Filter;","import Filter from '../FormElements/Filter.js';\nimport { getItemById } from '../utils.js';\n\nconst ConditionForm = ( {\n  condition, questions, questionToExclude, handleDelete, handleUpdate\n} ) => {\n  const question = condition.question || '';\n  const questionOptions = [];\n  questions.forEach( ( q, i ) => {\n    if ( q.id !== questionToExclude ) {\n      questionOptions.push({ label: i + 1, value: q.id });\n    }\n  });\n  const showAnswers = question && ['equals', 'not_equals'].includes( \n    condition.type\n  );\n  const getAnswerOptions = () => {\n    let questionObj = getItemById( questions, question );\n    let answers = questionObj.answers;\n    return answers.map( a => { return { label: a.text, value: a.id } } )\n  };\n  \n  return (\n    <div>\n      <div className=\"u-clearfix action-row\">\n        <h4>Condition</h4>\n        <button className=\"a-btn \n                           a-btn__link\n                           a-btn__warning\n                           delete-button\" \n                onClick={ () => handleDelete( condition.id ) }\n                type=\"button\">\n          Delete condition\n        </button>\n      </div>\n      <div className=\"condition-row\">\n        <span>Display if answer to question </span>\n        <Filter id={ `condition_${condition.id}_question` }\n                options={ questionOptions }\n                value={ question }\n                onChange={ ( val ) => handleUpdate( \n                    condition.id, 'question', val \n                ) }\n                placeholder=\"question\" />\n        <Filter id={`condition_${condition.id}_type`}\n                options={ [\n                  { label: 'exists', value: 'exists' },\n                  { label: 'is', value: 'equals' },\n                  { label: 'is not', value: 'not_equals' }\n                ] }\n                value={ condition.type}\n                onChange={ ( val ) => handleUpdate( \n                    condition.id, 'type', val \n                ) }\n                placeholder=\"match type\"/>\n        { showAnswers && (\n          <Filter id={ `condition_${condition.id}_answer` }\n                  options={ getAnswerOptions() }\n                  value={ condition.answer }\n                  onChange={ ( val ) => handleUpdate( \n                      condition.id, 'answer', val \n                  ) }\n                  placeholder=\"answer\"/>\n        ) }\n      </div>\n    </div>\n  )\n};\n\nexport default ConditionForm;","import ConditionGroupForm from './ConditionGroupForm.js';\nimport { generateId } from '../utils.js';\n\nconst ConditionGroupsForm = ( {\n  conditionBlock, handler, questions, questionToExclude\n} ) => {\n  const conditionGroups = conditionBlock.condition_groups || [];\n  \n  const addConditionGroup = () => {\n    let data = Object.assign( {}, conditionBlock );\n    data.condition_groups = [ ...conditionGroups, {\n      id: generateId(), \n      type: 'all', \n      conditions: []\n    } ];\n    handler( data );\n  }\n\n  const updateConditionGroup = ( data ) => {\n    let block = Object.assign( {}, conditionBlock );\n    let groups = [ ...conditionGroups ];\n    let index = groups.findIndex( item => item.id === data.id );\n    groups[index] = data;\n    block.condition_groups = groups;\n    handler( block );\n  };\n\n  const deleteConditionGroup = ( id ) => {\n    let block = Object.assign( {}, conditionBlock );\n    let groups = [ ...conditionGroups ];\n    let index = groups.findIndex( item => item.id === id );\n    groups.splice( index, 1 );\n    block.condition_groups = groups;\n    handler( block );\n  };\n\n  return (\n    <div>\n      { conditionGroups.length > 0 && conditionGroups.map( ( item, index ) => (\n        <ConditionGroupForm conditionGroup={ item }\n                            onUpdate={ updateConditionGroup }\n                            onDelete={ deleteConditionGroup }\n                            questions={ questions }\n                            questionToExclude={ questionToExclude }\n                            type=\"group\"\n                            key={ item.id }/>\n      ) ) }\n      <button className=\"a-btn a-btn__link u-mt15\"\n              type=\"button\"\n              onClick={ addConditionGroup }>\n        {`Add ${conditionGroups.length ? 'another' : 'a'} condition group`}\n      </button>\n      \n    </div>\n  )\n};\n\nexport default ConditionGroupsForm;","import ConditionForm from './ConditionForm.js';\nimport ConditionGroupsForm from './ConditionGroupsForm.js';\n\nimport Filter from '../FormElements/Filter.js';\nimport { generateId } from '../utils.js';\n\nconst ConditionGroupForm = ( {\n  conditionGroup, onUpdate, onDelete, \n  questions, questionToExclude, type=\"block\"\n} ) => {\n  const conditions = conditionGroup.conditions || [];\n  // this will either get a condition block or a condition group\n  // inside that condition block\n  // condition blocks don't have ids, condition groups do\n  // this form handles updating the type and the conditions\n  // array of the group and deleting the group\n  // on update, it passes updated data obj and on \n  // delete it passes the id of the condition group\n  const handleUpdate = ( prop, val ) => {\n    let data = Object.assign( {}, conditionGroup );\n    data[prop] = val;\n    onUpdate( data );\n  };\n\n  const addCondition = () => {\n    let copy = [ ...conditions, {\n      id: generateId(),\n      type: 'exists',\n      question: '',\n      answer: ''\n    } ];\n    handleUpdate( 'conditions', copy );\n  };\n\n  const updateCondition = ( id, prop, val ) => {\n    let copy = [ ...conditions ];\n    let index = copy.findIndex( item => item.id === id );\n    copy[index][prop] = val;\n    handleUpdate( 'conditions', copy );\n  };\n\n  const deleteCondition = ( id ) => {\n    let copy = [ ...conditions ];\n    let index = copy.findIndex( item => item.id === id );\n    copy.splice( index, 1 );\n    handleUpdate( 'conditions', copy );\n  };\n\n  return (\n    <div className=\"block \n                    block__sub\">\n      <div className=\"u-clearfix action-row\">\n        <h4>Condition { type }</h4>\n        <button className=\"a-btn\n                           a-btn__link\n                           a-btn__warning\n                           delete-button\"\n                type=\"button\" \n                onClick={ () => onDelete( conditionGroup.id ) }>\n          Delete condition { type }\n        </button>\n      </div>\n      <div className=\"o-well\">\n        <div className=\"condition-type-row\">\n          <span>Display if </span>\n          <Filter options={ [\n                    { label:'any', value:'any' }, \n                    { label:'all', value:'all' }\n                  ] }\n                  value={ conditionGroup.type }\n                  // id={`condition_block__${props.type}`}\n                  onChange={ ( val ) => handleUpdate( 'type', val ) }/>\n          <span>of the following conditions are met:</span>\n        </div>\n\n        <div className=\"block block__sub block__flush-bottom\">\n          {  conditions.length > 0 && conditions.map( ( item, index ) => (\n            <ConditionForm handleUpdate={ updateCondition } \n                           handleDelete={ deleteCondition }\n                           questions={ questions }\n                           questionToExclude={ questionToExclude }\n                           condition={ item } \n                           key={ item.id }/>\n          ) ) } \n        </div>\n        <button className=\"a-btn a-btn__link\"\n                    type=\"button\"\n                    onClick={ addCondition }>\n              {`Add ${conditions.length ? 'another' : 'a'} condition`}\n        </button>\n        {type === 'block' && \n          <ConditionGroupsForm conditionBlock={ conditionGroup }\n                               handler={ onUpdate }\n                               questions={ questions }\n                               questionToExclude={ questionToExclude }/>\n        }\n      </div>\n    </div>\n  )\n};\n\nexport default ConditionGroupForm;","import ConditionGroupForm from './ConditionGroupForm.js';\n\nconst ConditionBlockForm = ( {\n  conditionBlock, handler, questions, questionToExclude\n} ) => {\n\n  return (\n    <div>\n      <ConditionGroupForm conditionGroup={ conditionBlock }\n                          onUpdate={ handler }\n                          onDelete={ () => handler( null ) }\n                          questions={ questions }\n                          questionToExclude={ questionToExclude }/>\n    </div>\n  )\n};\n\nexport default ConditionBlockForm;","import ConditionBlockForm from './ConditionBlockForm.js';\n\nconst ConditionBlock = ( {\n  conditionBlock, handler, questions, questionToExclude\n} ) => {\n  // handler expects condition block data obj \n  const addConditionBlock = () => {\n    handler( { \n      type: 'all', \n      conditions: [], \n      condition_groups: []\n    } );\n  }\n\n  return (\n    <div>\n      { conditionBlock ? (\n        <ConditionBlockForm conditionBlock={ conditionBlock }\n                            handler={ handler }\n                            questions={ questions }\n                            questionToExclude={ questionToExclude }/>\n      ) : (\n          <button className=\"a-btn a-btn__link\"\n                  type=\"button\"\n                  onClick={ addConditionBlock }>\n            Add conditional display logic (optional)\n          </button>\n        )\n      }\n      </div>\n  )\n};\n\nexport default ConditionBlock;","import ConditionBlock from './ConditionBlock.js';\nimport Filter from '../FormElements/Filter.js';\n\nconst ResultItem = ( {\n  result, handleUpdate, handleDelete, questions, index\n} ) => {\n  const id = result.id;\n  return (\n      <form className=\"block \n                       block__sub\n                       block__border-bottom\n                       block__border-left\n                       block__border-right\n                       block__border-top\n                       u-clearfix\n                       decision-tree-node-item \n                       block__padded-bottom\n                       content-row\">\n        <div className=\"m-form-field\">\n          <div className=\"u-clearfix action-row\">\n            <h4>Result block { index + 1 }</h4>\n            <button className=\"a-btn \n                               a-btn__link\n                               a-btn__warning\n                               delete-button\" \n                    type=\"button\"\n                    onClick={ () => handleDelete( id ) }>\n              Delete result block\n            </button>\n          </div>\n          <div className=\"question-type\">\n            <Filter id={`result${result.id}_type`}\n                    options={ [ \n                              { label:'text', value:'text' }, \n                              { label:'expandable group', value:'expandable' }\n                            ] }\n                    value={ result.type }\n                    onChange={ ( val ) => handleUpdate( \n                      result.id, 'type', val \n                    ) }\n                    label=\"Type\"/>\n          </div>\n          <ConditionBlock conditionBlock={ result.condition_block } \n                          handler={ ( val ) => {\n                            handleUpdate( id, 'condition_block', val )\n                          } }\n                          questions={ questions }/>\n\n\n          <div className=\"block block__sub\">\n            <label className=\"a-label a-label__heading\" \n                   htmlFor={ `resultField_${id}`}>\n              Result block text\n            </label>\n            <textarea id={`resultField_${id}`}\n                   name=\"textField\"\n                   type=\"text\"\n                   value={ result.text }\n                   onChange={ ( e ) => { \n                    handleUpdate( id, 'text', e.target.value ) \n                   } }\n                   placeholder=\"Result text\"\n                   className=\"a-text-input a-text-input__full\" />\n          </div>\n      </div>\n     </form>\n  )\n};\n\nexport default ResultItem;","import { generateId } from '../utils.js';\n\nimport ResultItem from './ResultsBuilderItem.js';\n\nconst ResultsBuilder = ( { questions, results, setResults } ) => {\n  const addResult = ( ) => {\n    let copy = [ ...results, { \n      id: generateId(),\n      type: 'text',\n      text: ''\n    } ];\n    setResults( copy );\n  }\n\n  const deleteResult = ( id ) => {\n    let copy = [ ...results ];\n    let index = copy.findIndex( item => item.id === id );\n    copy.splice( index, 1 );\n    setResults( copy );\n  }\n\n  const updateResult = ( id, prop, val ) => {\n     let copy = [ ...results ];\n     let index = copy.findIndex( item => item.id === id );\n     copy[index][prop] = val;\n     setResults( copy );\n  }\n\n  return (\n    <div className=\"block\">\n      <h2>Result blocks</h2>\n      { results.length > 0 && \n        (<div className=\"block block__sub\">\n\t        {  results.map( ( item, index ) => (\n\t          <ResultItem handleUpdate={ updateResult } \n\t                      handleDelete={ deleteResult }\n\t                      result={ item } \n\t                      questions={ questions }\n\t                      key={ item.id }\n                        index={ index }/>\n\t        ) ) } \n        </div>)\n      }\n      <button className=\"a-btn\" onClick={ addResult }>\n        { `Add ${ results.length ? 'another' : 'a' } result block` }\n      </button>\n    </div>    \n  )\n};\n\nexport default ResultsBuilder;","import ConditionBlock from './ConditionBlock.js';\n\nconst QuestionnaireBuilderAnswer = ( {\n  answer, handleUpdate, handleDelete, questions, questionToExclude, index\n} ) => {\n  return (\n    <div className=\"o-well \">\n        <div className=\"u-clearfix action-row\">\n          <h4>Answer { index + 1 }</h4>\n          <button className=\"a-btn\n                             a-btn__link\n                             a-btn__warning\n                             delete-button\"\n                  type=\"button\"\n                  onClick={ () => handleDelete( answer.id )}>\n            Delete answer\n         </button>\n       </div>\n       <ConditionBlock conditionBlock={ answer.condition_block } \n                       handler={ ( data ) => handleUpdate( \n                        answer.id, 'condition_block', data \n                       ) }\n                       questions={ questions } \n                       questionToExclude={ questionToExclude }/>\n       <div className=\"m-form-field block block__sub\">\n        <label className=\"a-label\n                          a-label__heading\"\n              htmlFor={`answer-text-field-${answer.id}`}>\n          Answer text\n        </label>\n        <input id={`answer-text-field-${answer.id}`}\n               name=\"answerTextField\"\n               type=\"text\"\n               value={ answer.text} \n               onChange={ ( e ) => handleUpdate( \n                    answer.id, 'text', e.target.value \n               ) }\n               placeholder=\"Answer text\"\n               className=\"a-text-input a-text-input__full\" />\n      </div>\n     </div>\n  )\n};\n\nexport default QuestionnaireBuilderAnswer;","import { generateId } from '../utils.js';\n\nimport Answer from './QuestionnaireBuilderAnswer.js';\n\n\nconst AnswerList = ( {\n  question, updateQuestion, questions\n} ) => {\n  const answers = question.answers;\n  \n  const addAnswer = () => {\n    let copy = answers.length ? [ ...answers ] : [];\n    copy.push({\n      id: generateId(),\n      text: ''\n    });\n    updateQuestion( question.id, 'answers', copy );\n  }\n\n  const updateAnswer = ( id, prop, val ) => {\n    let copy = [ ...answers ];\n    let index = copy.findIndex(item => item.id === id );\n    let answer = copy[index];\n    answer[prop] = val;\n    copy[index] = answer;\n    updateQuestion( question.id, 'answers', copy );\n  }\n\n  const deleteAnswer = ( id ) => {\n    let copy = [ ...answers ];\n    let index = copy.findIndex( item => item.id === id );\n    copy.splice( index, 1 );\n    updateQuestion( question.id, 'answers', copy );\n  }\n\n  return (\n    <div className=\"answer-section block block__sub\">\n      <h4>Answers</h4>\n      { answers.length > 0 && answers.map( ( item, index ) => (\n        <Answer answer={ item } \n                questionToExclude={ question.id }\n                questions={ questions }\n                key={ item.id } \n                handleUpdate={ updateAnswer }\n                handleDelete={ deleteAnswer }\n                index={ index }/>\n      ) ) } \n      <button className=\"a-btn\" \n              onClick={ addAnswer }\n              type=\"button\">\n        {`Add ${answers.length ? 'another' : 'an'} answer`}\n      </button>\n    </div>\n  )\n};\n\nexport default AnswerList;","import ConditionBlock from './ConditionBlock.js';\n\nconst QuestionnaireBuilderContentBlock = ( {\n  block, handleUpdate, handleDelete, questions, questionToExclude, index\n} ) => {\n  return (\n    <div className=\"o-well \">\n      <div className=\"u-clearfix action-row\">\n        <h4>Content block { index + 1 }</h4>\n        <button className=\"a-btn \n                           a-btn__link\n                           a-btn__warning\n                           delete-button\" \n                type=\"button\"\n                onClick={ () => handleDelete( block.id ) }>\n          Delete content block\n        </button>\n      </div>\n      <ConditionBlock conditionBlock={ block.condition_block } \n                       handler={ ( data ) => handleUpdate( \n                        block.id, 'condition_block', data \n                       ) }\n                       questions={ questions } \n                       questionToExclude={ questionToExclude }/>\n      <div className=\"m-form-field block block__sub\">\n        <label className=\"a-label a-label__heading\" \n               htmlFor={ `contentBlockText_${block.id}` }>\n          Content block text\n        </label>\n        <textarea className=\"a-text-input a-text-input__full\"\n                  id={ `contentBlockText_${block.id}` }\n                  onChange={ (e ) => handleUpdate( \n                    block.id, 'text', e.target.value \n                  ) }\n                  placeholder=\"Content block text\"\n                  type=\"text\"\n                  value={ block.text }/>\n      </div>\n    </div>\n  )\n};\n\nexport default QuestionnaireBuilderContentBlock;","import { generateId } from '../utils.js';\n\nimport ContentBlock from './QuestionnaireBuilderContentBlock.js';\n\n\nconst ContentBlockList = ( {\n  question, updateQuestion, questions\n} ) => {\n  const contentBlocks = question.content_blocks;\n\n  const addContentBlock = () => {\n    let copy = contentBlocks.length ? [...contentBlocks] : [];\n    copy.push({\n      id: generateId(),\n      text: ''\n    });\n    updateQuestion( question.id, 'content_blocks', copy );\n  }\n\n  const updateContentBlock = ( id, prop, val ) => {\n    let copy = [ ...contentBlocks ];\n    let index = copy.findIndex(item => item.id === id );\n    let answer = copy[index];\n    answer[prop] = val;\n    copy[index] = answer;\n    updateQuestion( question.id, 'content_blocks', copy );\n  }\n\n  const deleteContentBlock = (id) => {\n    let copy = [ ...contentBlocks ];\n    let index = copy.findIndex( item => item.id === id );\n    copy.splice( index, 1 );\n    updateQuestion( question.id, 'content_blocks', copy );\n  }\n  \n  return (\n    <div className=\"answer-section block block__sub\">\n      <h4>Content blocks</h4>\n      { contentBlocks.length > 0 && contentBlocks.map( ( item, index ) => (\n        <ContentBlock block={ item } \n                      questionToExclude={ question.id }\n                      questions={ questions }\n                      key={ item.id } \n                      handleUpdate={ updateContentBlock }\n                      handleDelete={ deleteContentBlock }\n                      index={ index }/>\n      ) ) } \n      <button className=\"a-btn\"\n              type=\"button\"\n              onClick={ addContentBlock }>\n        {`Add ${contentBlocks.length ? 'another' : 'a'} content block`}\n      </button>\n    </div> \n  )\n};\n\nexport default ContentBlockList;","import AnswerList from './QuestionnaireBuilderAnswerList.js';\nimport ConditionBlock from './ConditionBlock.js';\nimport ContentBlockList from './QuestionnaireBuilderContentBlockList.js';\nimport Filter from '../FormElements/Filter.js';\n\nconst QuestionnaireBuilderQuestion = ( {\n  question, updateQuestion, handleDelete, questions, index\n} ) => {\n  const type = question.type || 'radio';\n  const required = question.required;\n\n  return (\n      <form className=\"block\n                       block__sub \n                       block__border-bottom\n                       block__border-left\n                       block__border-right\n                       block__border-top\n                       u-clearfix\n                       decision-tree-node-item\">\n        <div className=\"u-clearfix action-row\">\n          <h3>Question { index + 1 }</h3>\n          <button className=\"a-btn\n                             a-btn__link\n                             a-btn__warning\n                             delete-button\" \n                  type=\"button\"\n                  onClick={ () => handleDelete( question.id ) }>\n            Delete question\n          </button>\n        </div>\n        <div className=\"question-type\">\n          <Filter id={`question_${question.id}_type`}\n                  options={ [ \n                            { label:'radio', value:'radio' }, \n                            { label:'checkbox', value:'checkbox' }\n                          ] }\n                  value={ type }\n                  onChange={ ( val ) => updateQuestion( \n                    question.id, 'type', val \n                  ) }\n                  label=\"Type\"/>\n        </div>\n        <div className=\"m-form-field m-form-field__checkbox u-mb15 required-row\">\n          <input className=\"a-checkbox hover\"\n                 id={`required_${question.id}`}\n                 type=\"checkbox\"\n                 checked={ !!required }\n                 onChange={ ( e ) => updateQuestion( \n                    question.id, 'required', e.target.checked \n                  ) }/>\n          <label className=\"a-label\" htmlFor={`required_${question.id}`}>Required</label>\n        </div>\n        <ConditionBlock conditionBlock={ question.condition_block } \n                        handler={ ( val ) => updateQuestion( \n                          question.id, 'condition_block', val \n                        ) }\n                        questions={ questions } \n                        questionToExclude={ question.id }/>\n        <ContentBlockList question={ question }\n                          updateQuestion={ updateQuestion }\n                          questions={ questions }/>\n        <AnswerList question={ question }\n                    updateQuestion={ updateQuestion }\n                    questions={ questions }/>\n     </form>\n  )\n};\n\nexport default QuestionnaireBuilderQuestion;","import { generateId } from '../utils.js';\n\nimport QuestionnaireBuilderQuestion from './QuestionnaireBuilderQuestion.js';\n\n\nconst QuestionnaireBuilder = ( { questions, updateQuestions } ) => {\n  const addQuestion = ( data ) => {\n    let copy = [ ...questions, { \n      id: generateId(), \n      answers: [], \n      text: '',\n      condition_block: null,\n      content_blocks: [],\n      type: 'radio',\n      required: true\n    } ];\n    updateQuestions( copy );\n  }\n\n  const deleteQuestion = ( id ) => {\n    let copy = [ ...questions ];\n    let index = copy.findIndex( item => item.id === id );\n    copy.splice( index, 1 );\n    updateQuestions( copy );\n  }\n\n  const updateQuestion = ( id, prop, val ) => {\n    console.log('updating', id, prop, val)\n   let copy = [ ...questions ];\n   let index = copy.findIndex( item => item.id === id );\n   copy[index][prop] = val;\n   updateQuestions( copy );\n }\n  return (\n    <div>\n      <h2>Questions</h2>\n      { questions.length > 0 && questions.map( ( item, index ) => (\n        <QuestionnaireBuilderQuestion question={ item } \n                                      key={ item.id }\n                                      updateQuestion={updateQuestion} \n                                      handleDelete={deleteQuestion} \n                                      questions={questions}\n                                      index={ index }/>\n      ) ) } \n      <button className=\"a-btn\" onClick={addQuestion}>\n        {`Add ${questions.length ? 'another' : 'a'} question`}\n      </button>\n    </div>    \n  )\n};\n\nexport default QuestionnaireBuilder;","const QuestionnaireContentBlock = ( { contentBlock  } ) => {\n  return (\n  \t<div dangerouslySetInnerHTML={{__html: contentBlock.text }}></div>\n  )\n}\n\nexport default QuestionnaireContentBlock;","const Radio = ( props ) => {\n    const onChange = e => {\n      props.onChange( props.value );\n    };\n    return (\n      <div className={`m-form-field m-form-field__radio m-form-field__lg-target\n                       ${ props.containerClass ? props.containerClass : '' }`}>\n        <input className=\"a-radio\"\n               type=\"radio\"\n               value={ props.value }\n               id={ props.id }\n               name={ props.name }\n               checked={ props.checked }\n               disabled={ props.disabled }\n               onChange={ onChange }/>\n        <label className=\"a-label\"\n               htmlFor={ props.id }>\n          <span dangerouslySetInnerHTML={{__html: props.label }}></span>\n        </label>\n      </div>\n    )\n}\n\nexport default Radio;","import Radio from './Radio.js';\n\nconst RadioGroup = ( { questionID, selection, answers, onChange } ) => {\n  console.log('radio group', selection)\n  return (\n    <fieldset className=\"o-form_fieldset\">\n      { answers.map( ( answer, index ) => (\n        <Radio label={ answer.text }\n               value={ answer.id }\n               checked={ selection === answer.id }\n               id={`q_${questionID}_a_${answer.id}`}\n               onChange={ onChange } \n               key={ answer.id }/>\n      ) ) }\n    </fieldset>\n  )\n}\n\nexport default RadioGroup;","const Checkbox = ( props ) => {\n    const onChange = e => {\n      props.onChange( props.value, e.target.checked );\n    };\n    \n    return (\n      <div className={`m-form-field m-form-field__checkbox m-form-field__lg-target\n                       ${ props.containerClass ? props.containerClass : '' }`}>\n        <input className=\"a-checkbox\"\n               type=\"checkbox\"\n               value={ props.value }\n               id={ props.id }\n               name={ props.name }\n               checked={ props.checked }\n               disabled={ props.disabled }\n               onChange={ onChange }/>\n        <label className=\"a-label\"\n               htmlFor={ props.id }>\n          <span dangerouslySetInnerHTML={{__html: props.label }}></span>\n        </label>\n      </div>\n    )\n}\n\nexport default Checkbox;","import Checkbox from './Checkbox.js';\n\nconst CheckboxGroup = ( { questionID, selection, answers, onChange } ) => {\n  const selected = selection || [];\n  const handleChange = ( val, isChecked ) => {\n    let copy = [...selected];\n    if ( isChecked ) {\n      !copy.includes( val ) && copy.push( val );\n    } else {\n      copy = copy.filter( item => item !== val );\n    }\n    onChange( copy );\n  };\n\n  return (\n    <fieldset className=\"o-form_fieldset\">\n      { answers.map( ( answer, index ) => (\n        <Checkbox label={ answer.text }\n                  value={ answer.id }\n                  checked={ selected.includes( answer.id ) }\n                  id={`q_${questionID}_a_${answer.id}`}\n                  onChange={ handleChange }\n                  key={ answer.id }/>\n      ) ) }\n    </fieldset>\n  )\n}\n\nexport default CheckboxGroup;","import QuestionnaireContentBlock from './QuestionnaireContentBlock.js';\nimport RadioGroup from '../FormElements/RadioGroup.js';\nimport CheckboxGroup from '../FormElements/CheckboxGroup.js';\nimport { getDisplayable } from '../utils.js';\n\nconst QuestionnaireQuestion = ( { \n  question, selections, content, handleChange \n} ) => {\n  const answers = getDisplayable( question.answers, selections );\n  const contentBlocks = getDisplayable( question.content_blocks, selections );\n  const id = question.id;\n  const FormComponent = question.type === 'radio' ?\n                        RadioGroup : \n                        CheckboxGroup;\n  console.log('questionnaire question', id, selections, selections[id])\n  return (\n    <div className=\"question-item block\">\n      { contentBlocks.length > 0 && contentBlocks.map( ( item, index ) => (\n        <QuestionnaireContentBlock key={ item.id } \n                                   contentBlock={ item }/>\n      ) ) } \n      <FormComponent questionID={ id }\n                     selection={ selections[id] }\n                     answers={ answers }\n                     onChange={ ( val ) => handleChange( id, val ) }/>\n    </div>\n  )\n}\n\nexport default QuestionnaireQuestion;","import QuestionnaireQuestion from './QuestionnaireQuestion.js';\n\nconst QuestionnaireQuestionList = ( \n  { questions, selections, content, handleChange } \n) => {\n  console.log(questions)\n  return (\n      <div className=\"question-list\">\n        { questions.length > 0 && questions.map( ( item, index ) => (\n          <QuestionnaireQuestion question={ item } \n                                 key={ item.id }\n                                 selections={ selections }\n                                 content={ content }\n                                 handleChange={ handleChange } />\n        ) ) } \n      </div>\n  )\n}\n\nexport default QuestionnaireQuestionList;","const QuestionnaireResultItem = ( {result} ) => {\n  return (\n      <div className=\"block block__sub\">\n        <div dangerouslySetInnerHTML={{__html: result.text }}></div>\n      </div>\n  )\n}\n\nexport default QuestionnaireResultItem;","import QuestionnaireResultItem from './QuestionnaireResultItem.js';\nimport { getDisplayable } from '../utils.js';\n\nconst QuestionnaireResults = ( {\n  isFinished, isSubmitted, questions, selections, results\n} ) => {\n  const displayableResults = getDisplayable( results, selections );\n  return (\n      <div>\n      { isFinished && isSubmitted ? \n        (\n          <div className=\"results-list\">\n            { displayableResults.length > 0 && displayableResults.map( ( item, index ) => (\n              <QuestionnaireResultItem result={ item } \n                                       key={ item.id }/>\n            ) ) }  \n          </div>\n        ) :\n        ( null )\n      }\n      </div>\n  )\n}\n\nexport default QuestionnaireResults;\n","const QuestionnaireSubmitButton = ( { isFinished, submitForm } ) => {\n  const handleClick = ( ) => {\n    if ( isFinished ) {\n      submitForm();\n    }\n  }\n\n  return (\n      <button className={`a-btn ${isFinished ? '' : 'a-btn__disabled'}`} \n              type=\"button\"\n              onClick={ handleClick }\n              title={`${isFinished ? '' : 'disabled'}`}>\n        View results\n      </button>\n  )\n}\n\nexport default QuestionnaireSubmitButton;","import './App.css';\nimport { useEffect, useState } from 'react';\nimport JSONInput from './JSONInput.js';\nimport ResultsBuilder from './QuestionnaireBuilder/ResultsBuilder.js';\nimport QuestionnaireBuilder from './QuestionnaireBuilder/QuestionnaireBuilder.js';\nimport QuestionnaireQuestionList from './Questionnaire/QuestionnaireQuestionList.js';\nimport QuestionnaireResults from './Questionnaire/QuestionnaireResults.js';\nimport QuestionnaireSubmitButton from './Questionnaire/QuestionnaireSubmitButton.js';\n\nimport { checkFinished, getDisplayable } from './utils.js';\n// import * as initial_json from './test.json';\n// var initial_json = require('./test.json');\n// let initial_json = '{\"results\":[{\"text\":\"<h3>Results header -- always show</h3>\",\"id\":1},{\"text\":\"<h4>Make payments affordable</h4><ul><li>Request IDR</li><li>Use deferrment or forbearance as last resort</li></ul><h4>What to avoid</h4><ul><li>Don\\'t use credit cards or your home to pay off your loans</li><li>Don\\'t pay for help with your student loans</li><li>Don\\'t go back to school just to avoid your loans</li></ul>\",\"id\":2,\"condition_block\":{\"type\":\"all\",\"conditions\":[{\"type\":\"equals\",\"question\":1,\"answer\":1,\"id\":1},{\"type\":\"equals\",\"question\":2,\"answer\":4,\"id\":2}]}}],\"questions\":[{\"id\":1,\"type\":\"radio\",\"content_blocks\":[{\"text\":\"Where are you with your loans?\",\"id\":1}],\"answers\":[{\"text\":\"Off track. I\\'m struggling to afford my payments, I may have missed payments, or my loan may be in default. I want to know my options.\",\"id\":1},{\"text\":\"On track. I have not missed any payments. I know I can afford my payments.\",\"id\":2},{\"text\":\"Just starting out. My first payment is coming up or I recently started paying. I want to find out more information on repaying my student loans.\",\"id\":3}]},{\"id\":2,\"type\":\"checkbox\",\"condition_block\":{\"type\":\"all\",\"conditions\":[{\"type\":\"exists\",\"question\":1,\"id\":3}]},\"content_blocks\":[{\"id\":2,\"text\":\"Student debt can be stressful! Your options depend on the type of loans. What type of student loans do you have?\",\"condition_block\":{\"type\":\"all\",\"conditions\":[{\"type\":\"equals\",\"question\":1,\"answer\":1,\"id\":4}]}},{\"id\":3,\"text\":\"Glad it\\'s going well! You may have ways to improve your strategy for paying off your loans. What type of student loans do you have? \",\"condition_block\":{\"type\":\"all\",\"conditions\":[{\"type\":\"equals\",\"question\":1,\"answer\":2,\"id\":5}]}},{\"id\":4,\"text\":\"It can be tricky to figure out the student loan strategy that works best for you. Your options will depend on your situation. What type of student loans do you have?\",\"condition_block\":{\"type\":\"all\",\"conditions\":[{\"type\":\"equals\",\"question\":1,\"answer\":3,\"id\":6}]}},{\"id\":5,\"text\":\"Not sure? Your free credit report should list all your loans. See more details about your federal loans at www.studentaid.gov. Select all that apply \"}],\"answers\":[{\"text\":\"I have federal student loans for my own education.\",\"id\":4},{\"text\":\"I have federal Parent PLUS loans for my child\\'s education.\",\"id\":5},{\"text\":\"I took out a private education loan for my schooling or someone else\\'s\",\"id\":6},{\"text\":\"I co-signed someone else\\'s private education loan\",\"id\":7}]}],\"content\":{}}';\n\nfunction App() {\n  // Questionnaire builder state\n  const [ results, setResults ] = useState( [] );\n  const [ questions, setQuestions ] = useState( [] );\n\n  // Questionnaire state\n  const [selections, setSelections] = useState( {} );\n  const [activeQuestions, setActiveQuestions] = useState( [] );\n  const [isFinished, setFinished] = useState( false );\n  const [isSubmitted, setSubmitted] = useState( false );\n\n  const displayResults = () => {\n    if ( !isSubmitted ) {\n      setSubmitted( true );\n    }\n  }\n\n  const resetState = ( obj ) => {\n    if ( obj ) {\n      setQuestions(obj.questions || []);\n      setResults(obj.results || []);\n      setup( obj.questions || [], [] );\n    }\n  }\n\n  const setup = ( questionsArray, selectionsObj ) => {\n    const displayable = getDisplayable( questionsArray, selectionsObj );\n    let ids = displayable.map( item => item.id );\n    let leftovers = Object.keys( selectionsObj ).filter( x => !ids.includes( +x ) );\n    // handle checkbox array items that are no longer visible?\n\n    let copy = Object.assign( {}, selectionsObj );\n    console.log('copy', copy)\n    console.log('leftovers', leftovers)\n    // leftovers.forEach( id => delete copy[id] ); \n    let required = displayable.filter( q => q.required );\n    let finished = checkFinished( required, copy );\n    setActiveQuestions( displayable );\n    setSelections( copy );\n    setFinished( finished );\n    if ( !finished ) {\n      setSubmitted( false );\n    }\n  }\n\n  const updateQuestions = ( arr ) => {\n    setQuestions( arr );\n    setup( arr, selections );\n  }\n\n  const updateState = ( question, answer ) => {\n    console.log('updating state', question, answer)\n    let selectionsCopy = Object.assign( {}, selections );\n    selectionsCopy[ question ] = answer;\n    console.log('selections copy', selectionsCopy)\n    setup( questions, selectionsCopy );\n  }\n\n  // useEffect( () => {\n  //   console.log(initial_json)\n  //   // let obj = JSON.parse( initial_json );\n  //   resetState( initial_json )\n  // }, []);\n  \n  return (\n    <div className=\"App\">\n      <div className=\"Builders\">\n        <QuestionnaireBuilder questions={ questions }\n                              updateQuestions={ updateQuestions } />  \n        <ResultsBuilder questions={ questions }\n                        results={ results } \n                        setResults={ setResults }/>\n        \n      </div>\n      <div className=\"Questionnaire block\">\n        <h2>Questionnaire</h2>\n        <QuestionnaireQuestionList questions={ activeQuestions } \n                                   selections={ selections }\n                                   handleChange={ updateState }/>\n        <QuestionnaireSubmitButton isFinished={ isFinished }\n                                   submitForm={ displayResults }/>\n        <QuestionnaireResults isFinished={ isFinished }\n                              isSubmitted={ isSubmitted }\n                              questions={ questions } \n                              selections={ selections }\n                              results={ results }/>\n      </div>\n      <div className=\"JSON block\">\n        <h2>JSON</h2>\n        <JSONInput resetState={ resetState }/>\n        <div className=\"block block__sub\">\n          <h3>JSON output</h3>\n          <p>\n            { JSON.stringify( {\n              'results': results, \n              'questions': questions\n            } ) }\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}